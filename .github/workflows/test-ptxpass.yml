name: Build and test PTX pass executables

on:
  workflow_dispatch:
  push:
    branches: ["*"]
  pull_request:
    branches: ["master", "main"]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name }}
  cancel-in-progress: true

jobs:
  test-ptxpass:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - container: ubuntu-2204
            image: manjusakalza/bpftime-base-image:ubuntu-2204
    container:
      image: ${{ matrix.image }}
      options: --privileged
    steps:
      - name: Install git (openEuler)
        if: matrix.container == 'openeuler-2403sp2'
        run: |
          set -e
          if command -v dnf >/dev/null 2>&1; then PM=dnf; else PM=yum; fi
          $PM -y update
          $PM -y install git ca-certificates
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Remount shm dev (boost shared memory needs enough space)
        run: |
          mount -o remount,size=1G /dev/shm

      - name: Setup conda (for LLVM libraries if needed)
        if: matrix.container != 'openeuler-2403sp2'
        uses: conda-incubator/setup-miniconda@v3
        with:
          channels: conda-forge,bioconda
          channel-priority: strict
          miniforge-version: latest

      - name: Install tools (Ubuntu)
        if: matrix.container == 'ubuntu-2204'
        run: |
          apt-get update -y && apt-get install -y lcov libzstd-dev libboost-all-dev gpg

      - name: Detect LLVM and configure CMake (Ubuntu)
        if: matrix.container == 'ubuntu-2204'
        shell: bash
        run: |
          set -e
          LLVM_CONFIG=""
          for c in llvm-config-18 llvm-config-17 llvm-config-16 llvm-config-15 llvm-config; do
            if command -v "$c" >/dev/null 2>&1; then LLVM_CONFIG="$c"; break; fi
          done
          echo "Using LLVM_CONFIG=${LLVM_CONFIG:-not found}"
          if [ -n "$LLVM_CONFIG" ]; then
            LLVM_CMAKE_DIR=$($LLVM_CONFIG --cmakedir 2>/dev/null || true)
            if [ -n "$LLVM_CMAKE_DIR" ]; then
              cmake -B build -S . \
                -DCMAKE_BUILD_TYPE=Debug \
                -DBPFTIME_LLVM_JIT=YES \
                -DBPFTIME_ENABLE_UNIT_TESTING=YES \
                -DBPFTIME_ENABLE_CUDA_ATTACH=ON \
                -DBPFTIME_CUDA_ROOT=/usr/local/cuda-12.6 \
                -DLLVM_DIR="$LLVM_CMAKE_DIR"
            else
              cmake -B build -S . \
                -DCMAKE_BUILD_TYPE=Debug \
                -DBPFTIME_LLVM_JIT=YES \
                -DBPFTIME_ENABLE_UNIT_TESTING=YES \
                -DBPFTIME_ENABLE_CUDA_ATTACH=ON \
                -DBPFTIME_CUDA_ROOT=/usr/local/cuda-12.6
            fi
          else
            cmake -B build -S . \
              -DCMAKE_BUILD_TYPE=Debug \
              -DBPFTIME_LLVM_JIT=YES \
              -DBPFTIME_ENABLE_UNIT_TESTING=YES \
              -DBPFTIME_ENABLE_CUDA_ATTACH=ON \
              -DBPFTIME_CUDA_ROOT=/usr/local/cuda-12.6
          fi

      - name: Build PTX pass targets (Ubuntu)
        if: matrix.container == 'ubuntu-2204'
        run: |
          cmake --build build --config Debug --target \
            ptxpass_kprobe_entry ptxpass_kretprobe ptxpass_kprobe_memcapture bpftime_nv_attach_tests -j$(nproc)

      - name: Run PTX pass unit tests with Catch2 (Ubuntu)
        if: matrix.container == 'ubuntu-2204'
        shell: bash
        run: |
          cd build
          ctest --output-on-failure -R bpftime_nv_attach_tests

