name: Build and test PTX pass executables

on:
  workflow_dispatch:
  push:
    branches: ["*"]
  pull_request:
    branches: ["master", "main"]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name }}
  cancel-in-progress: true

jobs:
  test-ptxpass:
    runs-on: [self-hosted, Linux, X64, gpu]
    steps:
      - name: Configure proxy for China
        run: |
          echo "Setting up proxy for China network..."
          export http_proxy=http://192.168.15.1:2345
          export https_proxy=http://192.168.15.1:2345
          export HTTP_PROXY=http://192.168.15.1:2345
          export HTTPS_PROXY=http://192.168.15.1:2345
          export no_proxy=localhost,127.0.0.1,192.168.0.0/16
          echo "http_proxy=http://192.168.15.1:2345" >> $GITHUB_ENV
          echo "https_proxy=http://192.168.15.1:2345" >> $GITHUB_ENV
          echo "HTTP_PROXY=http://192.168.15.1:2345" >> $GITHUB_ENV
          echo "HTTPS_PROXY=http://192.168.15.1:2345" >> $GITHUB_ENV
          echo "no_proxy=localhost,127.0.0.1,192.168.0.0/16" >> $GITHUB_ENV
          git config --set http.proxy http://192.168.15.1:2345
          git config --set https.proxy http://192.168.15.1:2345
          
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Check and install required tools
        run: |
          echo "Checking installed tools..."
          
          # Check CMake
          if ! command -v cmake &> /dev/null; then
            echo "Installing cmake..."
            sudo apt-get update
            sudo apt-get install -y cmake
          else
            echo "cmake: $(which cmake)"
            cmake --version
          fi
          
          # Check compiler
          if ! command -v g++ &> /dev/null; then
            echo "Installing build essentials..."
            sudo apt-get install -y build-essential
          else
            echo "g++: $(which g++)"
            g++ --version | head -1
          fi
          
          # Check other dependencies
          echo "Installing required libraries..."
          sudo apt-get install -y libboost-all-dev libzstd-dev pkg-config || true
          
          # Check and install LLVM
          if ! command -v llvm-config &> /dev/null && \
             ! command -v llvm-config-18 &> /dev/null && \
             ! command -v llvm-config-17 &> /dev/null && \
             ! command -v llvm-config-16 &> /dev/null && \
             ! command -v llvm-config-15 &> /dev/null; then
            echo "Installing LLVM..."
            sudo apt-get install -y llvm-18 llvm-18-dev || \
            sudo apt-get install -y llvm-17 llvm-17-dev || \
            sudo apt-get install -y llvm-16 llvm-16-dev || \
            sudo apt-get install -y llvm-15 llvm-15-dev || \
            sudo apt-get install -y llvm llvm-dev
          fi
          
          # Show LLVM version
          for c in llvm-config-18 llvm-config-17 llvm-config-16 llvm-config-15 llvm-config; do
            if command -v "$c" &> /dev/null; then
              echo "Found: $c"
              $c --version
              break
            fi
          done
          
          # Check CUDA
          nvcc --version || echo "nvcc not found (CUDA compiler)"

      - name: Check CUDA installation
        shell: bash
        run: |
          echo "Checking for CUDA installation..."
          if [ -d "/usr/local/cuda" ]; then
            echo "Found CUDA at /usr/local/cuda"
            ls -la /usr/local/cuda/ || true
            if [ -f "/usr/local/cuda/version.json" ] || [ -f "/usr/local/cuda/version.txt" ]; then
              echo "CUDA version info:"
              cat /usr/local/cuda/version.json 2>/dev/null || cat /usr/local/cuda/version.txt 2>/dev/null || true
            fi
          fi
          for cuda_dir in /usr/local/cuda-* ; do
            if [ -d "$cuda_dir" ]; then
              echo "Found CUDA at $cuda_dir"
              ls -la "$cuda_dir/targets/x86_64-linux/include/" 2>/dev/null | head -20 || true
            fi
          done

      - name: Detect LLVM and configure CMake
        shell: bash
        run: |
          set -e
          
          # Find CUDA
          CUDA_ROOT=""
          if [ -d "/usr/local/cuda" ]; then
            CUDA_ROOT="/usr/local/cuda"
          else
            for cuda_dir in /usr/local/cuda-* ; do
              if [ -d "$cuda_dir" ]; then
                CUDA_ROOT="$cuda_dir"
                break
              fi
            done
          fi
          
          if [ -z "$CUDA_ROOT" ]; then
            echo "ERROR: CUDA not found in /usr/local/"
            exit 1
          fi
          
          echo "Using CUDA_ROOT=${CUDA_ROOT}"
          
          # Verify CUDA headers exist
          if [ ! -f "${CUDA_ROOT}/targets/x86_64-linux/include/cuda_runtime.h" ] && \
             [ ! -f "${CUDA_ROOT}/include/cuda_runtime.h" ]; then
            echo "ERROR: cuda_runtime.h not found in ${CUDA_ROOT}"
            exit 1
          fi
          
          LLVM_CONFIG=""
          for c in llvm-config-18 llvm-config-17 llvm-config-16 llvm-config-15 llvm-config; do
            if command -v "$c" >/dev/null 2>&1; then LLVM_CONFIG="$c"; break; fi
          done
          echo "Using LLVM_CONFIG=${LLVM_CONFIG:-not found}"
          if [ -n "$LLVM_CONFIG" ]; then
            LLVM_CMAKE_DIR=$($LLVM_CONFIG --cmakedir 2>/dev/null || true)
            if [ -n "$LLVM_CMAKE_DIR" ]; then
              cmake -B build -S . \
                -DCMAKE_BUILD_TYPE=Debug \
                -DBPFTIME_LLVM_JIT=YES \
                -DBPFTIME_ENABLE_UNIT_TESTING=YES \
                -DBPFTIME_ENABLE_CUDA_ATTACH=ON \
                -DBPFTIME_CUDA_ROOT="${CUDA_ROOT}" \
                -DLLVM_DIR="$LLVM_CMAKE_DIR"
            else
              cmake -B build -S . \
                -DCMAKE_BUILD_TYPE=Debug \
                -DBPFTIME_LLVM_JIT=YES \
                -DBPFTIME_ENABLE_UNIT_TESTING=YES \
                -DBPFTIME_ENABLE_CUDA_ATTACH=ON \
                -DBPFTIME_CUDA_ROOT="${CUDA_ROOT}"
            fi
          else
            cmake -B build -S . \
              -DCMAKE_BUILD_TYPE=Debug \
              -DBPFTIME_LLVM_JIT=YES \
              -DBPFTIME_ENABLE_UNIT_TESTING=YES \
              -DBPFTIME_ENABLE_CUDA_ATTACH=ON \
              -DBPFTIME_CUDA_ROOT="${CUDA_ROOT}"
          fi

      - name: Build PTX pass targets
        run: |
          cmake --build build --config Debug --target \
            ptxpass_kprobe_entry ptxpass_kretprobe ptxpass_kprobe_memcapture bpftime_nv_attach_tests -j$(nproc)

      - name: Run PTX pass unit tests with Catch2
        shell: bash
        run: |
          cd build
          ctest --output-on-failure -R bpftime_nv_attach_tests

